#pragma kernel computeGrid
#pragma kernel generatePointCloud
#pragma kernel debugDisplayGridPoints
#pragma kernel computeGridForMesh
#pragma kernel computeMesh
#pragma kernel filterSolidsPerChunk
#pragma kernel compactPointCloud
#pragma kernel optimizePointCloud
#pragma kernel generatePointCloudMicroVoxels
#pragma kernel optimizeMicrovoxels
#pragma kernel computeGridMip3
#pragma kernel computeMeshRealTime
#pragma kernel computeMeshRealTime2
#pragma kernel compactSmoothMesh
#pragma kernel optimizeSmoothMesh
RWStructuredBuffer<int> indirectChunkArgs2,indirectChunkArgs1;RWStructuredBuffer<float3> gridData;RWStructuredBuffer<int> boundingBox;RWStructuredBuffer<int2> pointCloudDataMip3;RWStructuredBuffer<int> gridPointersMip2,gridPointersMip3;RWStructuredBuffer<int2> chunkPointCloudData;RWStructuredBuffer<int> pointCloudDataToSolidId,chunkPointCloudDataToSolidId;StructuredBuffer<int> triangleConnectionTable;RWStructuredBuffer<int> indirectDrawArgs,numSolidsPerChunk,updateChunks,solidsPerChunk,prefilteredSolidIds,solidsFilter;RWStructuredBuffer<float3> chunksCenter;RWStructuredBuffer<int> numPointsInChunk,pointToChunkId;RWStructuredBuffer<float2> gridDataLowRes;RWStructuredBuffer<int> volumetricDraw,chunkIdOffset,microvoxelCounters;RWStructuredBuffer<int2> pointCloudDataMip3Opt;RWStructuredBuffer<int> gridPointersMip2Opt,gridPointersMip3Opt;RWStructuredBuffer<float3> meshPointsOpt;RWStructuredBuffer<float4> meshNormalsOpt;RWStructuredBuffer<int> chunkSizeGlobBuffer;RWStructuredBuffer<float3> chunksCenterGlob;RWStructuredBuffer<int> boundingBoxGlob,instancesMatrixGlob,instancesMatrixInvGlob,microvoxelCountersGlob,chunkIdOffsetGlob,gridPointersMip3Glob,gridPointersMip2Glob;RWStructuredBuffer<int2> pointCloudDataMip3Glob;RWStructuredBuffer<int> chunkIdToContainerIdGlob,localChunkIdGlob,instanceToContainerIdGlob;RWStructuredBuffer<float> chunkSizeGlob;StructuredBuffer<float3> solidsPos;StructuredBuffer<float4> solidsRot;StructuredBuffer<float3> solidsScale;StructuredBuffer<float> solidsBlend;StructuredBuffer<int> solidsType;StructuredBuffer<float3> solidsColor;StructuredBuffer<float4> solidsAttrs,solidsAttrs2;StructuredBuffer<int> solidsClayObjectId,solidsUpdated;RWStructuredBuffer<int3> meshOutIndices;RWStructuredBuffer<float3> meshOutPoints;RWStructuredBuffer<float4> meshOutColors;RWStructuredBuffer<float3> meshOutNormals,meshPoints;RWStructuredBuffer<float4> meshNormals;RWStructuredBuffer<float3> meshNormalsTemp;RWStructuredBuffer<int3> smoothMeshGridData;uint maxSolids=0,maxSolidsPerVoxel=0,maxSolidsPerVoxelMask=0,chunkId=0,numSolids=0,numSolidsBlending=0;float chunkSize=20.;int numChunksX=0,numChunksY=0,numChunksZ=0,outMeshIndexOffset=0;float solidsMaxInfluence=0.;uint numSolidsUpdated=0;int storeSolidId=0,maxPointCount=0;float seamOffsetMultiplier=1.,bufferSizeReduceFactor=1.,globalBlendReduce=0.;int globalChunkId=0,numChunks=0;float meshNormalSmooth,meshVoxelize;groupshared int3 gs_pointCloudData[255];groupshared uint gs_numElements=0,gs_globalOffset=0;
#include"claySDF.compute"
static const int3 cellTable[]={int3(0,0,0),int3(0,0,1),int3(0,0,2),int3(0,0,3),int3(0,1,0),int3(0,1,1),int3(0,1,2),int3(0,1,3),int3(0,2,0),int3(0,2,1),int3(0,2,2),int3(0,2,3),int3(0,3,0),int3(0,3,1),int3(0,3,2),int3(0,3,3),int3(1,0,0),int3(1,0,1),int3(1,0,2),int3(1,0,3),int3(1,1,0),int3(1,1,1),int3(1,1,2),int3(1,1,3),int3(1,2,0),int3(1,2,1),int3(1,2,2),int3(1,2,3),int3(1,3,0),int3(1,3,1),int3(1,3,2),int3(1,3,3),int3(2,0,0),int3(2,0,1),int3(2,0,2),int3(2,0,3),int3(2,1,0),int3(2,1,1),int3(2,1,2),int3(2,1,3),int3(2,2,0),int3(2,2,1),int3(2,2,2),int3(2,2,3),int3(2,3,0),int3(2,3,1),int3(2,3,2),int3(2,3,3),int3(3,0,0),int3(3,0,1),int3(3,0,2),int3(3,0,3),int3(3,1,0),int3(3,1,1),int3(3,1,2),int3(3,1,3),int3(3,2,0),int3(3,2,1),int3(3,2,2),int3(3,2,3),int3(3,3,0),int3(3,3,1),int3(3,3,2),int3(3,3,3)},localGridCellCoords[8]={int3(0,0,0),int3(1,0,0),int3(1,1,0),int3(0,1,0),int3(0,0,1),int3(1,0,1),int3(1,1,1),int3(0,1,1)};static const float3 vertexOffset[8]={float3(0,0,0),float3(1,0,0),float3(1,1,0),float3(0,1,0),float3(0,0,1),float3(1,0,1),float3(1,1,1),float3(0,1,1)};static const int2 edgeConnection[12]={int2(0,1),int2(1,2),int2(2,3),int2(3,0),int2(4,5),int2(5,6),int2(6,7),int2(7,4),int2(0,4),int2(1,5),int2(2,6),int2(3,7)};static const float3 edgeDirection[12]={float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f)},cardinalCellOffset[8]={float3(-1,-1,-1),float3(1,-1,-1),float3(1,1,-1),float3(-1,1,-1),float3(-1,-1,1),float3(1,-1,1),float3(1,1,1),float3(-1,1,1)};static const int3 neighbourMip3[27]={int3(0,0,0),int3(0,1,0),int3(0,-1,0),int3(1,0,0),int3(-1,0,0),int3(0,0,1),int3(0,0,-1),int3(1,1,1),int3(0,1,1),int3(-1,1,1),int3(1,1,-1),int3(0,1,-1),int3(-1,1,-1),int3(1,1,0),int3(-1,1,0),int3(1,-1,1),int3(0,-1,1),int3(-1,-1,1),int3(1,-1,-1),int3(0,-1,-1),int3(-1,-1,-1),int3(1,-1,0),int3(-1,-1,0),int3(1,0,1),int3(-1,0,1),int3(1,0,-1),int3(-1,0,-1)};static const int cubeEdgeFlags[]={0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0};int f(int x,int i,int y,int c){return x+c*(i+c*y);}uint f(float3 i){uint e=uint(i.x*255)+uint(i.y*255)*256+uint(i.z*255)*256*256;return e;}uint f(uint i,uint x,uint y,uint f,uint e){uint t=(((i<<6|x)<<6|y)<<6|f)<<8|e;return t;}uint s(uint i,uint x,uint y,uint f,uint e){uint t=(((i<<6|x)<<8|y)<<8|f)<<4|e;return t;}uint f(uint i,uint x,uint e){uint t=(i<<6|x)<<18|e;return t;}uint f(uint f,uint e){uint t=f<<24|e;return t;}void s(int f,out int i[5]){i[4]=f&255,f>>=8,i[3]=f&63,f>>=6,i[2]=f&63,f>>=6,i[1]=f&63,f>>=6,i[0]=f&63;}uint s(float i,float f,float y,float x){uint r=uint(round(i*63.)),u=uint(round(f*63.)),z=uint(round(y*63.)),e=uint((x+1.)*.5*16383.),t=((r<<6|u)<<6|z)<<14|e;return t;}float4 s(uint i){float f=float(i&16383)/16383*2.-1.;i>>=14;float y=float(i&63)/63;i>>=6;float x=float(i&63)/63,u=float(i>>6)/63;return float4(u,x,y,f);}float t(float3 i,float3 e){float3 u=abs(i)-e;return max(u.x,max(u.y,u.z));}float t(float i,float f,float x,float e){float y=max(x-abs(i-f),0.);return min(i,f)-y*y*.25f*e;}float c(float x,float i,float f,float e){float y=max(f-abs(-x-i),0.);return max(-x,i)+y*y*.25*e;}bool c(uint e,uint f){uint x=f*rcp(32);int i=solidsFilter[e*maxSolidsPerVoxelMask+x],u=f-32*x;bool t=false;if(i>>u&1)t=true;return t;}void d(uint e,uint f){uint x=f/32;int c=solidsFilter[e*maxSolidsPerVoxelMask+x],i=f-32*x;solidsFilter[e*maxSolidsPerVoxelMask+x]=c&~(1<<i);}bool c(int x){return x>>0&1;}bool d(int x){return x>>2&1;}bool t(int x){return x>>3&1;}float c(float3 i,float x,float y,uint f,uint s){float e=999.;uint z=s*maxSolidsPerVoxel;float u=999.,m=0.,g=0.;bool M=false;for(uint r=0;r<f;++r){uint n=prefilteredSolidIds[z+r];float3 o=solidsScale[n];float k=(o.x+o.y+o.z)*.333333,v=solidsBlend[n],S=rcp(v);float4 b=solidsAttrs[n],p=solidsAttrs2[n];bool D=true;float a=999.;if(d(b.w))y+=abs(v),u=e,e=999.,m=v,g=S,D=false,M=true,v=0.,S=1.;else if(t(b.w))a=e,e=u,v=m,S=g,D=false,M=false;if(D)a=computeClayDistanceFunction(solidsType[n],i,solidsPos[n],solidsRot[n],o,b,p,k);if(!c(b.w)){if(v==0.)e=min(a,e);else if(v>0.)e=t(a,e,v,S);else e=c(a,e,abs(v),abs(S));}if(D&&a>y)d(s,r);if(D)y-=abs(v);}return e;}float c(float3 i,float x,float e,out int f,out float3 u,uint y,uint s,uint z){float r=999.;u=float3(1.,1.,1.);uint n=s*maxSolidsPerVoxel;float g=999.,v=0.,m=0.;float3 M=0.;bool k=false;int S=0,p=0;for(uint o=0;o<y;++o){if(!c(s,o)){continue;}uint a=prefilteredSolidIds[n+o];float3 b=solidsScale[a];float D=(b.x+b.y+b.z)*.333333,l=solidsBlend[a],w=rcp(l);float3 h=solidsColor[a];float4 X=solidsAttrs[a],Y=solidsAttrs2[a];bool Z=true;float C=999.;if(d(X.w))g=r,r=999.,v=l,m=w,M=u,Z=false,k=true,S=a,p=f;else if(t(X.w))C=r,r=g,l=v,w=m,a=S,Z=false,k=false;if(Z)C=computeClayDistanceFunction(solidsType[a],i,solidsPos[a],solidsRot[a],b,X,Y,D);if(!k&&C<r)f=a;float I=0.;bool O=c(X.w);if(l==0.){I=clamp((r-C)*e,0.,1.);if(!O)r=min(C,r);}else if(l>0.){I=1.-clamp(.5+.5*(C-r)*w,0.,1.);if(!O)r=t(C,r,l,w);}else{I=1.-clamp(.5+.5*(-C-r)*w,0.,1.);if(!O)r=c(C,r,abs(l),abs(w));if(I>.5)f=a;}if(!Z)h=lerp(M,u,I),I=1.-I;u=lerp(u,h,I);}return r;}float3 r(uint i){int u=(i&255)>>0,f=(i&65280)>>8,M=(i&16711680)>>16;return float3(u/255.,f/255.,M/255.);}int3 n(uint i){int f=(i&255)>>0,u=(i&65280)>>8,x=(i&16711680)>>16;return int3(f,u,x);}bool p(int3 i){if(i.x<0)return true;if(i.x>255)return true;if(i.y<0)return true;if(i.y>255)return true;if(i.z<0)return true;if(i.z>255)return true;return false;}float i(int4 x){float e=0.;for(uint f=0;f<numSolids;++f)e+=abs(solidsBlend[f]);return e;}float3 i(int3 x,float i){float e=i*.5,f=chunkSize*.5;float3 t=float3(i*x.x-f,i*x.y-f,i*x.z-f)+e;return t;}void d(float3 f,float x,uint c,inout uint i,inout float y){uint e=numSolidsPerChunk[chunkId],u=c*maxSolidsPerVoxel;int n=c*maxSolidsPerVoxelMask;float s=0.,z=0.;bool r=false;float m=0.,v=2.-globalBlendReduce;uint o=0;for(o=0;o<e;++o){uint a=solidsPerChunk[chunkId*maxSolids+o];float g=abs(solidsBlend[a]),M=solidsAttrs[a].w;float3 k=f;if(int(M)>>1&1)k.x=abs(k.x);float3 D=solidsScale[a],S=solidsPos[a];float4 p=solidsRot[a];float3 b=k-S,l=mulQuat(b,p);float C=t(l,D)-x*1.732;if(C<v){m+=g;if(m>1.){m=1.;break;}}}float g=v*m;for(o=0;o<e;++o){uint a=solidsPerChunk[chunkId*maxSolids+o];solidsFilter[n+o*rcp(32)]=-1;float3 M=solidsScale[a];float D=solidsAttrs[a].w;float3 k=f;if(int(D)>>1&1)k.x=abs(k.x);float p=abs(solidsBlend[a]);float3 S=solidsPos[a];float4 l=solidsRot[a];float3 b=k-S,C=mulQuat(b,l);float I=t(C,M)-x*1.732*2.;if(r)s+=g,z+=p;bool w=true;if(d(D))s=0.,z=0.,I=0.,r=true;else if(t(D))g=s,p=z,I=0.,w=false,r=false;if(I<g){prefilteredSolidIds[u+i]=a;i+=1;if(w)y+=g;if(i==maxSolidsPerVoxel){break;}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGrid(int3 i:SV_DispatchThreadID){float x=chunkSize*.5,u=chunkSize*.015625,o=u*.5,s=chunkSize*.00390625,M=s*.5,r=u*1.732,m=rcp(s);float3 t=float3(u*i.x-x,u*i.y-x,u*i.z-x);int e=f(i.x,i.y,i.z,64);float3 k=chunksCenter[chunkId];uint y=0;float z=0.;float3 S=t+o+k;d(S,u*.5,e,y,z);float b=c(S,u,z+u,y,e);gridDataLowRes[e]=float2(b,y);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridMip3(uint3 i:SV_DispatchThreadID){float x=chunkSize*.5,u=chunkSize*.015625,y=chunkSize*.00390625,z=y*.5,M=u*1.732,S=rcp(y);int e=f(i.x/4,i.y/4,i.z/4,64),a=f(i.x,i.y,i.z,256);float2 t=gridDataLowRes[e];float r=t.x;int s=t.y;gridData[a]=float3(r,0,0);if(abs(r)<M){int n=0;float3 m=float3(1.,1.,1.),v=i*y+y-z-x,o=chunksCenter[chunkId];float b=c(v+o,z,S,n,m,s,e,a);int D=solidsClayObjectId[n]+1;gridData[a]=float3(b,f(m),D);}}float n(float f,float c){float i=c-f,e=.5;if(i!=0.)e=f/i;return e;}float2 S(float2 i){float2 e=i.xy>=0.?1.:-1.,f=(1.-abs(i.yx))*e;return f;}float m(float2 i){int e=32;float f=floor(i.x*(e-1)),u=floor(i.y*(e-1)),t=f*e+u;return t;}float k(float3 i){i/=abs(i.x)+abs(i.y)+abs(i.z);i.xy=i.z>=0.?i.xy:S(i.xy);i.xy=i.xy*.5+.5;float e=m(i.xy);return e;}int S(uint f,uint x,uint y,uint e){int t=f<<24|x<<16|y<<8|e;return t;}uint d(uint i,uint x,uint f,uint e){uint t=((i<<6|x)<<6|f)<<14|e;return t;}uint i(uint i,uint x,uint f,uint e){uint t=((i<<5|x)<<4|f)<<18|e;return t;}float g(float3 i){float e=dot(round(i*255),float3(65536,256,1));return e;}void S(int3 i,float x){if(i.x>254||i.y>254||i.z>254||i.x<1||i.y<1||i.z<1){return;}int e=f(i.x,i.y,i.z,256);float3 c=gridData[e];if(c.z==0.){return;}float s[8];uint y=0;for(int m=0;m<8;++m){int3 u=i+localGridCellCoords[m];int a=f(u.x,u.y,u.z,256);float3 t=gridData[a];if(t.z==0.){return;}s[m]=t.x;if(t.x<=0.)y|=1<<m;}int u=cubeEdgeFlags[y];if(u==0){return;}int t=y*16,r=triangleConnectionTable[t+3];float g=n(s[edgeConnection[r].x],s[edgeConnection[r].y]);float3 z=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[t+4];g=n(s[edgeConnection[r].x],s[edgeConnection[r].y]);float3 o=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[t+5];g=n(s[edgeConnection[r].x],s[edgeConnection[r].y]);float3 b=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r],v=z+o+b,M=cross(b-z,o-z);if(dot(M,M)>0.){r=triangleConnectionTable[t];g=n(s[edgeConnection[r].x],s[edgeConnection[r].y]);z=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[t+1];g=n(s[edgeConnection[r].x],s[edgeConnection[r].y]);o=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[t+2];g=n(s[edgeConnection[r].x],s[edgeConnection[r].y]);b=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];M+=cross(b-z,o-z);r=triangleConnectionTable[t+6];g=n(s[edgeConnection[r].x],s[edgeConnection[r].y]);z=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[t+7];g=n(s[edgeConnection[r].x],s[edgeConnection[r].y]);o=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[t+8];g=n(s[edgeConnection[r].x],s[edgeConnection[r].y]);b=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];M+=cross(b-z,o-z);r=triangleConnectionTable[t+9];g=n(s[edgeConnection[r].x],s[edgeConnection[r].y]);z=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[t+10];g=n(s[edgeConnection[r].x],s[edgeConnection[r].y]);o=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];r=triangleConnectionTable[t+11];g=n(s[edgeConnection[r].x],s[edgeConnection[r].y]);b=vertexOffset[edgeConnection[r].x]-g*edgeDirection[r];M+=cross(b-z,o-z);M=normalize(M);v/=3;int D=c.y,p=c.z;float3 k=v-float3(.5,.5,.5);float a=dot(k,M);float3 I=M;I/=abs(I.x)+abs(I.y)+abs(I.z);I.xy=I.z>=0.?I.xy:S(I.xy);I.xy=I.xy*.5+.5;a=a*.5+.5;int3 C=n(D);int l=0;InterlockedAdd(gs_numElements,1,l);if(l<255)gs_pointCloudData[l]=int3(S(i.x,i.y,i.z,uint(round(I.x*255.))),f(uint(round(a*63.)),uint(round(C.x/256.*63.)),uint(round(C.y/256.*63.)),uint(round(C.z/256.*63.)),uint(round(I.y*255.))),p);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloud(int3 i:SV_DispatchThreadID,uint c:SV_GroupIndex){if(i.x>254||i.y>254||i.z>254||i.x<1||i.y<1||i.z<1){return;}float e=chunkSize/256;int r=f(i.x,i.y,i.z,256);float3 s=gridData[r];if(s.z==0.){return;}float u[8];uint x=0;for(int m=0;m<8;++m){int3 M=i+localGridCellCoords[m];int t=f(M.x,M.y,M.z,256);float3 g=gridData[t];if(g.z==0.){return;}u[m]=g.x;if(g.x<=0.)x|=1<<m;}int t=cubeEdgeFlags[x];if(t==0){return;}int y=x*16,a=triangleConnectionTable[y+3];float g=n(u[edgeConnection[a].x],u[edgeConnection[a].y]);float3 z=vertexOffset[edgeConnection[a].x]-g*edgeDirection[a];a=triangleConnectionTable[y+4];g=n(u[edgeConnection[a].x],u[edgeConnection[a].y]);float3 o=vertexOffset[edgeConnection[a].x]-g*edgeDirection[a];a=triangleConnectionTable[y+5];g=n(u[edgeConnection[a].x],u[edgeConnection[a].y]);float3 b=vertexOffset[edgeConnection[a].x]-g*edgeDirection[a],v=z+o+b,M=cross(b-z,o-z);if(dot(M,M)>0.){a=triangleConnectionTable[y];g=n(u[edgeConnection[a].x],u[edgeConnection[a].y]);z=vertexOffset[edgeConnection[a].x]-g*edgeDirection[a];a=triangleConnectionTable[y+1];g=n(u[edgeConnection[a].x],u[edgeConnection[a].y]);o=vertexOffset[edgeConnection[a].x]-g*edgeDirection[a];a=triangleConnectionTable[y+2];g=n(u[edgeConnection[a].x],u[edgeConnection[a].y]);b=vertexOffset[edgeConnection[a].x]-g*edgeDirection[a];M+=cross(b-z,o-z);a=triangleConnectionTable[y+6];g=n(u[edgeConnection[a].x],u[edgeConnection[a].y]);z=vertexOffset[edgeConnection[a].x]-g*edgeDirection[a];a=triangleConnectionTable[y+7];g=n(u[edgeConnection[a].x],u[edgeConnection[a].y]);o=vertexOffset[edgeConnection[a].x]-g*edgeDirection[a];a=triangleConnectionTable[y+8];g=n(u[edgeConnection[a].x],u[edgeConnection[a].y]);b=vertexOffset[edgeConnection[a].x]-g*edgeDirection[a];M+=cross(b-z,o-z);a=triangleConnectionTable[y+9];g=n(u[edgeConnection[a].x],u[edgeConnection[a].y]);z=vertexOffset[edgeConnection[a].x]-g*edgeDirection[a];a=triangleConnectionTable[y+10];g=n(u[edgeConnection[a].x],u[edgeConnection[a].y]);o=vertexOffset[edgeConnection[a].x]-g*edgeDirection[a];a=triangleConnectionTable[y+11];g=n(u[edgeConnection[a].x],u[edgeConnection[a].y]);b=vertexOffset[edgeConnection[a].x]-g*edgeDirection[a];M+=cross(b-z,o-z);M=normalize(M);v/=3;int D=s.y,p=s.z;float3 k=v-float3(.5,.5,.5);float I=dot(k,M);float3 R=M;R/=abs(R.x)+abs(R.y)+abs(R.z);R.xy=R.z>=0.?R.xy:S(R.xy);R.xy=R.xy*.5+.5;I=I*.5+.5;int3 C=n(D);uint l=0;InterlockedAdd(numPointsInChunk[chunkId],3,l);l/=3;int2 d=int2(S(i.x,i.y,i.z,uint(round(R.x*255.))),f(uint(round(I*63.)),uint(round(C.x/256.*63.)),uint(round(C.y/256.*63.)),uint(round(C.z/256.*63.)),uint(round(R.y*255.))));chunkPointCloudData[chunkId*maxPointCount+l]=d;if(storeSolidId==1)chunkPointCloudDataToSolidId[chunkId*maxPointCount+l]=p;}}int4 v(uint f){uint i=f>>24,u=(16711680&f)>>16,y=(65280&f)>>8,z=255&f;return int4(i,u,y,z);}void g(uint f,uint t){uint a=f/5,i=round(float(float(f)/5.-a)*5),u=pointToChunkId[a],s[5];s[0]=u&63;u>>=6;s[1]=u&63;u>>=6;s[2]=u&63;u>>=6;s[3]=u&63;u>>=6;s[4]=u&63;s[i]=t;uint e=(((s[4]<<6|s[3])<<6|s[2])<<6|s[1])<<6|s[0];pointToChunkId[a]=e;}uint k(uint f,uint x){uint z=f/5,i=6*round(float(float(f)/5.-z)*5),e=(1<<6)-1&x>>i;return e;}[numthreads(1,1,1)]void compactPointCloud(int3 f:SV_DispatchThreadID){int i=f.x+f.y*numChunksX+numChunksX*numChunksY*f.z;uint u=numPointsInChunk[i],m;InterlockedAdd(indirectDrawArgs[0],u,m);uint e=u/3;m/=3;for(uint r=0;r<e;++r){uint a=m+r;pointCloudDataMip3[a]=chunkPointCloudData[i*maxPointCount+r];g(a,i);if(storeSolidId==1)pointCloudDataToSolidId[a]=chunkPointCloudDataToSolidId[i*maxPointCount+r];}}[numthreads(1,1,1)]void optimizePointCloud(int3 i:SV_DispatchThreadID){uint f=indirectDrawArgs[0],u=f/3,r=u;for(uint a=0;a<u;++a){int4 s=v(pointCloudDataMip3[a].x);float e=frac(sin(dot(float2(s.x,s.y),float2(12.9898,78.233+s.z)))*43758.5);uint x=round(e*(r-1));r-=1;uint z=k(r,pointToChunkId[r/5]);int2 t=pointCloudDataMip3[r];pointCloudDataMip3[r]=pointCloudDataMip3[x];pointCloudDataMip3[x]=t;uint y=k(x,pointToChunkId[x/5]);g(r,y);g(x,z);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void debugDisplayGridPoints(int3 i:SV_DispatchThreadID){}float4 a(uint i){int u=(i&255)>>0,f=(i&65280)>>8,M=(i&16711680)>>16;return float4(u/255.,f/255.,M/255.,1.);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridForMesh(int3 u:SV_DispatchThreadID){float x=chunkSize/64;float3 t=i(u,x);int y=f(u.x,u.y,u.z,64);float3 e=chunksCenter[chunkId];uint z=0;float M=0.;d(t+e,x*.5,y,z,M);float s=x*.25,g=s*.5,r=x*.5,D=chunkSize/256,o=chunkSize*.5;int a=y*maxSolidsPerVoxelMask;for(uint m=0;m<maxSolidsPerVoxelMask;++m)solidsFilter[a+m]=-1;float k=c(t+e,x,M+x,z,y);for(uint n=0;n<8;++n){float3 v=t+s*cardinalCellOffset[n];for(uint b=0;b<8;++b){float3 I=v+g*cardinalCellOffset[b];int3 p=int3(round((I.x+o-g)/D),round((I.y+o-g)/D),round((I.z+o-g)/D));int S=f(p.x,p.y,p.z,256);gridData[S]=float3(0,0,0);int l=0;float3 C=float3(1.,1.,1.);float w=c(I+e,g,rcp(s),l,C,z,y,S);int Z=solidsClayObjectId[l]+1;gridData[S]=float3(w,f(C),Z);}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void e(int3 i:SV_DispatchThreadID){}inline float3 a(int3 u,out float3 m){float e=chunkSize/256;int r=f(u.x,u.y,u.z,256);float3 s=gridData[r];m=a(s.y).xyz;float t[8];int x=0,M=0;for(int y=0;y<8;++y){int3 g=u+localGridCellCoords[y];int c=f(g.x,g.y,g.z,256);float3 v=gridData[c];t[y]=v.x;if(v.z==0.){continue;}if(v.x<0.)x|=1<<y;}int g=cubeEdgeFlags[x];float3 c=i(u,e);float z=1.-meshVoxelize;int v=0;float3 b=float3(0,0,0);for(int o=0;o<12;++o){if((g&1<<o)!=0){float S=t[edgeConnection[o].x],D=t[edgeConnection[o].y],p=n(S,D);b+=c+(vertexOffset[edgeConnection[o].x]-p*edgeDirection[o])*e*z;v+=1;}}b/=v;return b;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMesh(int3 i:SV_DispatchThreadID){if(i.x>253||i.y>253||i.z>253){return;}else if(i.x<1||i.y<1||i.z<1){return;}int e=f(i.x+1,i.y+1,i.z+1,256);float3 u=gridData[e],x,s,y,z,o=chunksCenter[chunkId],t=a(int3(i.x,i.y,i.z),x)+o,r,m,g,c;int n=f(i.x,i.y+1,i.z+1,256);float3 b=gridData[n];if(sign(u.x)!=sign(b.x)){r=a(int3(i.x,i.y,i.z+1),s)+o;m=a(int3(i.x,i.y+1,i.z+1),y)+o;g=a(int3(i.x,i.y+1,i.z),z)+o;if(u.x>b.x)c=g,g=r,r=c,c=z,z=s,s=c;uint v=meshOutIndices.IncrementCounter();int I=v*3;meshOutPoints[I]=t;meshOutIndices[v][0]=I+outMeshIndexOffset;meshOutColors[I]=float4(x,1);I=v*3+1;meshOutPoints[I]=r;meshOutIndices[v][1]=I+outMeshIndexOffset;meshOutColors[I]=float4(s,1);I=v*3+2;meshOutPoints[I]=m;meshOutIndices[v][2]=I+outMeshIndexOffset;meshOutColors[I]=float4(y,1);v=meshOutIndices.IncrementCounter();I=v*3;meshOutPoints[I]=t;meshOutIndices[v][0]=I+outMeshIndexOffset;meshOutColors[I]=float4(x,1);I=v*3+1;meshOutPoints[I]=m;meshOutIndices[v][1]=I+outMeshIndexOffset;meshOutColors[I]=float4(y,1);I=v*3+2;meshOutPoints[I]=g;meshOutIndices[v][2]=I+outMeshIndexOffset;meshOutColors[I]=float4(z,1);}n=f(i.x+1,i.y,i.z+1,256);b=gridData[n];if(sign(u.x)!=sign(b.x)){r=a(int3(i.x,i.y,i.z+1),s)+o;m=a(int3(i.x+1,i.y,i.z+1),y)+o;g=a(int3(i.x+1,i.y,i.z),z)+o;if(u.x<b.x)c=g,g=r,r=c,c=z,z=s,s=c;uint v=meshOutIndices.IncrementCounter();int I=v*3;meshOutPoints[I]=t;meshOutIndices[v][0]=I+outMeshIndexOffset;meshOutColors[I]=float4(x,1);I=v*3+1;meshOutPoints[I]=r;meshOutIndices[v][1]=I+outMeshIndexOffset;meshOutColors[I]=float4(s,1);I=v*3+2;meshOutPoints[I]=m;meshOutIndices[v][2]=I+outMeshIndexOffset;meshOutColors[I]=float4(y,1);v=meshOutIndices.IncrementCounter();I=v*3;meshOutPoints[I]=t;meshOutIndices[v][0]=I+outMeshIndexOffset;meshOutColors[I]=float4(x,1);I=v*3+1;meshOutPoints[I]=m;meshOutIndices[v][1]=I+outMeshIndexOffset;meshOutColors[I]=float4(y,1);I=v*3+2;meshOutPoints[I]=g;meshOutIndices[v][2]=I+outMeshIndexOffset;meshOutColors[I]=float4(z,1);}n=f(i.x+1,i.y+1,i.z,256);b=gridData[n];if(sign(u.x)!=sign(b.x)){r=a(int3(i.x,i.y+1,i.z),s)+o;m=a(int3(i.x+1,i.y+1,i.z),y)+o;g=a(int3(i.x+1,i.y,i.z),z)+o;if(u.x>b.x)c=g,g=r,r=c,c=z,z=s,s=c;uint I=meshOutIndices.IncrementCounter();int v=I*3;meshOutPoints[v]=t;meshOutIndices[I][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=I*3+1;meshOutPoints[v]=r;meshOutIndices[I][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(s,1);v=I*3+2;meshOutPoints[v]=m;meshOutIndices[I][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(y,1);I=meshOutIndices.IncrementCounter();v=I*3;meshOutPoints[v]=t;meshOutIndices[I][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=I*3+1;meshOutPoints[v]=m;meshOutIndices[I][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(y,1);v=I*3+2;meshOutPoints[v]=g;meshOutIndices[I][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(z,1);}}[numthreads(1,1,1)]void filterSolidsPerChunk(int3 i:SV_DispatchThreadID){int a=i.x+i.y*numChunksX+numChunksX*numChunksY*i.z;float x=chunkSize*.00390625*seamOffsetMultiplier,u=chunkSize-x,o=chunkSize*.5;float3 f=float3(-(chunkSize*numChunksX*.5)+o+u*i.x,-(chunkSize*numChunksY*.5)+o+u*i.y,-(chunkSize*numChunksZ*.5)+o+u*i.z);chunksCenter[a]=f;int e=a*3,r=updateChunks[a]-1;if(r<-1)r=-1;int m=0;float g=chunkSize*.5,z=2.-globalBlendReduce;for(uint I=0;I<numSolids;++I){float3 s=f;if(checkMirrorX(solidsAttrs[I].w))s.x=abs(s.x);float3 y=solidsPos[I],M=solidsScale[I];float4 c=solidsRot[I];float3 b=s-y,S=mulQuat(b,c);float D=t(S,M)-z;if(abs(D)<chunkSize*.8){solidsPerChunk[a*maxSolids+m]=I;m+=1;if(r<=0){for(uint v=0;v<numSolidsUpdated;++v){uint k=solidsUpdated[v];if(k==I){r=1;break;}}}}}numSolidsPerChunk[a]=m;uint c=0,s=0;if(r>-1){c=64/MAXTHREADS;s=256/MAXTHREADS;uint y=a*6;boundingBox[y]=64;boundingBox[y+1]=64;boundingBox[y+2]=64;boundingBox[y+3]=0;boundingBox[y+4]=0;boundingBox[y+5]=0;numPointsInChunk[a]=0;}updateChunks[a]=r;indirectChunkArgs1[e]=c;indirectChunkArgs1[e+1]=c;indirectChunkArgs1[e+2]=c;indirectChunkArgs2[e]=s;indirectChunkArgs2[e+1]=s;indirectChunkArgs2[e+2]=s;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloudMicroVoxels(int3 i:SV_DispatchThreadID){int e=f(i.x,i.y,i.z,64);uint x=262144,u=chunkId*x,a=u+e;gridPointersMip2[a]=-1;if(gridDataLowRes[e].x==999.){return;}float3 m=float3(0,0,0),s=float3(0,0,0),r=float3(0,0,0);int y=0;for(uint I=0;I<64;++I){int3 o=cellTable[I],t=int3(i.x*4+o.x,i.y*4+o.y,i.z*4+o.z);uint z=f(uint(o.x),uint(o.y),uint(o.z),4),v=0;float M[8]={0,0,0,0,0,0,0,0};int g=0,D=0;for(int b=0;b<8;++b){int3 c=t+localGridCellCoords[b];if(c.x<1||c.y<1||c.z<1||c.x>253||c.y>253||c.z>253){return;}int k=f(c.x,c.y,c.z,256);float3 p=gridData[k];float l=p.x;if(l==0.){continue;}M[b]=l;if(l<=0.)v|=1<<b,D=p.z,g=p.y;}int c=cubeEdgeFlags[v];if(c==0){continue;}int k=v*16;float3 p=float3(0,0,0),l=float3(0,0,0);int R=0;for(int w=0;w<5;++w){int C=w*3,Z=triangleConnectionTable[k+C];if(Z>-1){float X=n(M[edgeConnection[Z].x],M[edgeConnection[Z].y]);float3 h=vertexOffset[edgeConnection[Z].x]-X*edgeDirection[Z];Z=triangleConnectionTable[k+C+1];X=n(M[edgeConnection[Z].x],M[edgeConnection[Z].y]);float3 Y=vertexOffset[edgeConnection[Z].x]-X*edgeDirection[Z];Z=triangleConnectionTable[k+C+2];X=n(M[edgeConnection[Z].x],M[edgeConnection[Z].y]);float3 O=vertexOffset[edgeConnection[Z].x]-X*edgeDirection[Z];p+=h+Y+O;l+=cross(O-h,Y-h);R+=3;}else{break;}}if(R>0){p/=R;float3 C=p-.5;l=normalize(l);float X=dot(C,l);X=X*.5+.5;m+=p;s+=l;float3 Z=l;Z/=abs(Z.x)+abs(Z.y)+abs(Z.z);Z.xy=Z.z>=0.?Z.xy:S(Z.xy);Z.xy=Z.xy*.5+.5;int3 Y=n(g);float3 h=float3(Y.x*.00390625,Y.y*.00390625,Y.z*.00390625);r+=h;uint O=S(z,uint(round(X*255.)),uint(round(Z.x*255.)),uint(round(Z.y*255.))),P=d(uint(round(h.x*63.)),uint(round(h.y*63.)),uint(round(h.z*63.)),D),T=e*128+y*2;prefilteredSolidIds[T]=O;prefilteredSolidIds[T+1]=P;y+=1;}}if(y>0){m/=y;s=normalize(s);r/=y;float3 z=m-.5;float g=dot(z,s);g=g*.5+.5;float3 c=s;c/=abs(c.x)+abs(c.y)+abs(c.z);c.xy=c.z>=0.?c.xy:S(c.xy);c.xy=c.xy*.5+.5;uint t=chunkId*(16777216*bufferSizeReduceFactor),o=0;InterlockedAdd(volumetricDraw[7],64,o);for(uint v=0;v<64;++v)gridPointersMip3[t+o+v]=-1;uint M=0;InterlockedAdd(volumetricDraw[6],y+1,M);uint b=0;for(int D=0;D<y;++D){uint k=e*128+D*2;int2 p=int2(prefilteredSolidIds[k],prefilteredSolidIds[k+1]);pointCloudDataMip3[t+M+D+1]=p;b=p.x>>24;gridPointersMip3[t+o+b]=f(D,M);}uint k=uint(round(c.x*255.)),p=uint(round(c.y*255.)),l=uint(round(g*255.)),w=S(y,k,p,l);int2 C=int2(o,w);pointCloudDataMip3[t+M]=C;gridPointersMip2[a]=M;uint Z=chunkId*6;InterlockedMin(boundingBox[Z],i.x);InterlockedMin(boundingBox[Z+1],i.y);InterlockedMin(boundingBox[Z+2],i.z);InterlockedMax(boundingBox[Z+3],i.x);InterlockedMax(boundingBox[Z+4],i.y);InterlockedMax(boundingBox[Z+5],i.z);}}[numthreads(1,1,1)]void optimizeMicrovoxels(int3 i:SV_DispatchThreadID){int a=i.x+i.y*numChunksX+numChunksX*numChunksY*i.z;bool u=true;uint e=262144;for(uint r=0;r<e;++r){int t=gridPointersMip2[a*e+r];if(t>-1){u=false;break;}}if(u){return;}uint t=0;InterlockedAdd(microvoxelCounters[0],262144,t);chunkIdOffset[a]=t;uint y=a*(16777216*bufferSizeReduceFactor);for(uint x=0;x<e;++x){int o=gridPointersMip2[a*e+x];gridPointersMip2Opt[t+x]=-1;if(o>-1){int z=0;InterlockedAdd(microvoxelCounters[1],64,z);uint s=v(pointCloudDataMip3[y+o].y).x;for(uint m=0;m<64;++m)gridPointersMip3Opt[z+m]=-1;uint c=0;InterlockedAdd(microvoxelCounters[2],s+1,c);for(uint g=0;g<s;++g){int I=pointCloudDataMip3[y+o+g+1].x>>24;gridPointersMip3Opt[z+I]=f(g,c);pointCloudDataMip3Opt[c+g+1]=pointCloudDataMip3[y+o+g+1];}int2 I=int2(z,pointCloudDataMip3[y+c].y);pointCloudDataMip3Opt[c]=I;gridPointersMip2Opt[t+x]=c;}}}inline float3 S(int3 u,float x,float s[8]){int a=f(u.x,u.y,u.z,256);float3 e=gridData[a],t=i(u,x);int r=0,M=0;for(int m=0;m<8;++m){int3 c=u+localGridCellCoords[m];int I=f(c.x,c.y,c.z,256);float3 g=gridData[I];s[m]=g.x;if(g.z==0.){continue;}if(g.x<0.)r|=1<<m;}int g=cubeEdgeFlags[r];float c=1.-meshVoxelize;uint I=0;float3 k=float3(0,0,0);for(int y=0;y<12;++y){if((g&1<<y)!=0){float z=s[edgeConnection[y].x],D=s[edgeConnection[y].y],v=n(z,D);k+=t+(vertexOffset[edgeConnection[y].x]-v*edgeDirection[y])*x*c;I+=1;}}k/=I;return k;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMeshRealTime(int3 i:SV_DispatchThreadID){int a=f(i.x,i.y,i.z,256);smoothMeshGridData[a]=int3(-1,-1,-1);if(i.x>253||i.y>253||i.z>253||i.x<1||i.y<1||i.z<1){return;}int r=f(i.x+1,i.y+1,i.z+1,256);float3 u=gridData[r],m=0.;float x=chunkSize*.00390625,s[8];float3 e=chunksCenter[chunkId],z=S(int3(i.x,i.y,i.z),x,s)+e,t,g,c,v;r=f(i.x,i.y+1,i.z+1,256);float3 b=gridData[r];uint y=chunkId*maxPointCount;if(sign(u.x)!=sign(b.x)){t=S(int3(i.x,i.y,i.z+1),x,s)+e;g=S(int3(i.x,i.y+1,i.z+1),x,s)+e;c=S(int3(i.x,i.y+1,i.z),x,s)+e;if(u.x>b.x)v=c,c=t,t=v;uint I=0;InterlockedAdd(numPointsInChunk[chunkId],6,I);int n=y+I;meshPoints[n]=z;n=y+I+1;meshPoints[n]=t;n=y+I+2;meshPoints[n]=g;n=y+I+3;meshPoints[n]=z;n=y+I+4;meshPoints[n]=g;n=y+I+5;meshPoints[n]=c;m=cross(t-z,g-z);meshNormalsTemp[I]=m;meshNormalsTemp[I+1]=m;meshNormalsTemp[I+2]=m;meshNormalsTemp[I+3]=m;meshNormalsTemp[I+4]=m;meshNormalsTemp[I+5]=m;smoothMeshGridData[a].x=I;}r=f(i.x+1,i.y,i.z+1,256);b=gridData[r];if(sign(u.x)!=sign(b.x)){t=S(int3(i.x,i.y,i.z+1),x,s)+e;g=S(int3(i.x+1,i.y,i.z+1),x,s)+e;c=S(int3(i.x+1,i.y,i.z),x,s)+e;if(u.x<b.x)v=c,c=t,t=v;uint I=0;InterlockedAdd(numPointsInChunk[chunkId],6,I);int n=y+I;meshPoints[n]=z;n=y+I+1;meshPoints[n]=t;n=y+I+2;meshPoints[n]=g;n=y+I+3;meshPoints[n]=z;n=y+I+4;meshPoints[n]=g;n=y+I+5;meshPoints[n]=c;m=cross(t-z,g-z);meshNormalsTemp[I]=m;meshNormalsTemp[I+1]=m;meshNormalsTemp[I+2]=m;meshNormalsTemp[I+3]=m;meshNormalsTemp[I+4]=m;meshNormalsTemp[I+5]=m;smoothMeshGridData[a].y=I;}r=f(i.x+1,i.y+1,i.z,256);b=gridData[r];if(sign(u.x)!=sign(b.x)){t=S(int3(i.x,i.y+1,i.z),x,s)+e;g=S(int3(i.x+1,i.y+1,i.z),x,s)+e;c=S(int3(i.x+1,i.y,i.z),x,s)+e;if(u.x>b.x)v=c,c=t,t=v;uint I=0;InterlockedAdd(numPointsInChunk[chunkId],6,I);int n=y+I;meshPoints[n]=z;n=y+I+1;meshPoints[n]=t;n=y+I+2;meshPoints[n]=g;n=y+I+3;meshPoints[n]=z;n=y+I+4;meshPoints[n]=g;n=y+I+5;meshPoints[n]=c;m=cross(t-z,g-z);meshNormalsTemp[I]=m;meshNormalsTemp[I+1]=m;meshNormalsTemp[I+2]=m;meshNormalsTemp[I+3]=m;meshNormalsTemp[I+4]=m;meshNormalsTemp[I+5]=m;smoothMeshGridData[a].z=I;}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMeshRealTime2(int3 i:SV_DispatchThreadID){if(i.x>253||i.y>253||i.z>253||i.x<1||i.y<1||i.z<1){return;}int e=f(i.x,i.y,i.z,256);int3 s=smoothMeshGridData[e];if(s.x==-1&&s.y==-1&&s.z==-1){return;}float3 c=gridData[e],t=a(c.y).xyz;float u=meshNormalSmooth*.00555556;int g=lerp(1,27,u);float x=radians(meshNormalSmooth),v=lerp(0.,.005,meshVoxelize);uint I=chunkId*maxPointCount;for(int r=0;r<3;++r){if(s[r]!=-1){uint y=s[r];for(int m=0;m<6;++m){float3 z=meshPoints[I+y+m],M=meshNormalsTemp[y+m],D=normalize(M),b=t;int n=1;for(int o=0;o<g;++o){int3 k=i+neighbourMip3[o];int Z=f(k.x,k.y,k.z,256);int3 p=smoothMeshGridData[Z];for(int l=0;l<3;++l){if(p[l]!=1){uint C=p[l];for(int R=0;R<6;++R){float3 d=meshPoints[I+C+R],w=meshNormalsTemp[C+R],h=z-d;float X=dot(h,h),Y=dot(normalize(w),D);if(X<=v&&Y<x){M+=w;uint O=gridData[Z].y;b+=a(O).xyz;n+=1;}}}}}float3 p=M;p/=abs(p.x)+abs(p.y)+abs(p.z);p.xy=p.z>=0.?p.xy:S(p.xy);p.xy=p.xy*.5+.5;b/=n;uint k=f(b);float l=c.z;meshNormals[I+y+m]=float4(p.x,p.y,k,l);}}}}[numthreads(1,1,1)]void compactSmoothMesh(int3 i:SV_DispatchThreadID){int a=i.x+i.y*numChunksX+numChunksX*numChunksY*i.z;uint e=numPointsInChunk[a],f;InterlockedAdd(indirectDrawArgs[0],e,f);for(uint m=0;m<e;++m){uint r=f+m;pointToChunkId[r]=a*maxPointCount+m;}}[numthreads(1,1,1)]void optimizeSmoothMesh(int3 i:SV_DispatchThreadID){int a=i.x+i.y*numChunksX+numChunksX*numChunksY*i.z;uint e=numPointsInChunk[a],y;InterlockedAdd(indirectDrawArgs[0],e,y);for(uint r=0;r<e;++r)meshPointsOpt[y+r]=meshPoints[a*maxPointCount+r],meshNormalsOpt[y+r]=meshNormals[a*maxPointCount+r];}